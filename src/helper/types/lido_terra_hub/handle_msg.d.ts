/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HandleMsg =
  | {
      update_config: {
        airdrop_registry_contract?: HumanAddr | null;
        bluna_token_contract?: HumanAddr | null;
        owner?: HumanAddr | null;
        rewards_dispatcher_contract?: HumanAddr | null;
        stluna_token_contract?: HumanAddr | null;
        validators_registry_contract?: HumanAddr | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      update_params: {
        epoch_period?: number | null;
        er_threshold?: Decimal | null;
        peg_recovery_fee?: Decimal | null;
        unbonding_period?: number | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      bond: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      bond_for_st_luna: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      bond_rewards: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      update_global_index: {
        airdrop_hooks?: Binary[] | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      withdraw_unbonded: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      check_slashing: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      receive: Cw20ReceiveMsg;
      [k: string]: unknown;
    }
  | {
      claim_airdrop: {
        airdrop_contract: HumanAddr;
        airdrop_swap_contract: HumanAddr;
        airdrop_token_contract: HumanAddr;
        claim_msg: Binary;
        swap_msg: Binary;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      swap_hook: {
        airdrop_swap_contract: HumanAddr;
        airdrop_token_contract: HumanAddr;
        swap_msg: Binary;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      redelegate_proxy: {
        amount: Coin;
        dst_validator: HumanAddr;
        src_validator: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
export type HumanAddr = string;
/**
 * A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0
 *
 * The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)
 */
export type Decimal = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
export type Uint128 = string;

/**
 * Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a HandleMsg
 */
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg?: Binary | null;
  sender: HumanAddr;
  [k: string]: unknown;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
